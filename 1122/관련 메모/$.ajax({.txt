$.ajax({
    url: "/board/search",
    type: "POST",
    contentType: "application/json",
    dataType: "json",
    data: JSON.stringify(formData),
    success: function (response) {
        var memberList = response.memberList;
        var totalCount = response.totalCount;
        
        // 페이지 정보 계산
        var pageDTO = calculatePageInfo(pageNum, amount, totalCount);
        
        // 페이징 UI 구현
        renderPagingUI(pageDTO);
        
        // 회원 목록 표시
        renderMemberList(memberList);
    },
    error: function (xhr, status, error) {
        console.error(error);
    }
});


페이징값


<!-- HTML -->
<div id="pagination"></div>


// JavaScript
const pageSize = 10; // 페이지당 표시할 데이터 개수
let currentPage = 1; // 현재 페이지 번호
let totalPage = 0; // 전체 페이지 개수

function createPaginationUI() {
  const paginationContainer = document.getElementById('pagination');
  paginationContainer.innerHTML = '';

  // 이전 페이지로 이동하는 버튼
  const prevButton = document.createElement('button');
  prevButton.innerText = '이전';
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      loadData();
    }
  });
  paginationContainer.appendChild(prevButton);

  // 페이지 번호를 표시하는 버튼
  for (let i = 1; i <= totalPage; i++) {
    const pageButton = document.createElement('button');
    pageButton.innerText = i;
    pageButton.addEventListener('click', () => {
      currentPage = i;
      loadData();
    });
    paginationContainer.appendChild(pageButton);
  }

  // 다음 페이지로 이동하는 버튼
  const nextButton = document.createElement('button');
  nextButton.innerText = '다음';
  nextButton.addEventListener('click', () => {
    if (currentPage < totalPage) {
      currentPage++;
      loadData();
    }
  });
  paginationContainer.appendChild(nextButton);
}

function loadData() {
  // 서버에 현재 페이지에 해당하는 데이터 요청을 보내고, 응답을 받아서 처리하는 로직을 구현해야 합니다.
  // 예시로는 AJAX를 사용하여 서버에 요청하는 코드를 작성하였습니다.
  const requestData = {
    pageNum: currentPage,
    amount: pageSize
  };

  // AJAX 요청
  $.ajax({
    url: '/search', // 실제 요청 주소를 적절히 수정해야 합니다.
    type: 'POST',
    data: JSON.stringify(requestData),
    contentType: 'application/json',
    success: function(response) {
      // 서버로부터 받은 응답을 처리하는 로직을 작성해야 합니다.
      // 예시로는 받은 데이터를 사용하여 표시하는 코드를 작성하였습니다.
      const memberList = response.memberList;

      // TODO: 받은 데이터를 사용하여 표시하는 로직 작성

      // 페이지네이션 UI 갱신
      totalPage = Math.ceil(response.totalCount / pageSize);
      createPaginationUI();
    },
    error: function(error) {
      console.error('Error:', error);
    }
  });
}

// 초기화
loadData();



// JavaScript
const pageSize = 10; // 페이지당 표시할 데이터 개수
let currentPage = 1; // 현재 페이지 번호
let totalPage = 0; // 전체 페이지 개수

function createPaginationUI() {
  // 이전 페이지로 이동하는 버튼 생성
  const prevButton = document.createElement('button');
  prevButton.innerText = '이전';
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      loadData();
    }
  });
  // 페이지 번호를 표시하는 버튼 생성
  // 다음 페이지로 이동하는 버튼 생성
  const nextButton = document.createElement('button');
  nextButton.innerText = '다음';
  nextButton.addEventListener('click', () => {
    if (currentPage < totalPage) {
      currentPage++;
      loadData();
    }
  });
  // 페이지 버튼 생성 로직 작성
  const paginationContainer = document.getElementById('pagination');
  paginationContainer.innerHTML = '';
  paginationContainer.appendChild(prevButton);
  // 페이지 번호를 표시하는 버튼을 생성하여 paginationContainer에 추가
  paginationContainer.appendChild(nextButton);
}

function loadData() {
  // 서버에 현재 페이지에 해당하는 데이터 요청을 보내고, 응답을 받아서 처리하는 로직 작성
  const requestData = {
    pageNum: currentPage,
    amount: pageSize
  };

  // AJAX 요청
  $.ajax({
    url: '/search', // 실제 요청 주소를 적절히 수정해야 합니다.
    type: 'POST',
    data: JSON.stringify(requestData),
    contentType: 'application/json',
    success: function(response) {
      // 서버로부터 받은 응답을 처리하는 로직을 작성해야 합니다.
      // 예시로는 받은 데이터를 사용하여 표시하는 코드를 작성하였습니다.
      const memberList = response.memberList;

      // TODO: 받은 데이터를 사용하여 표시하는 로직 작성

      // 페이지네이션 UI 갱신
      totalPage = Math.ceil(response.totalCount / pageSize);
      createPaginationUI();
    },
    error: function(error) {
      console.error('Error:', error);
    }
  });
}

function search2() {
  // 검색 버튼 클릭 시 호출되는 함수
  // 검색 조건 설정 및 초기화 로직 작성
  const searchData = {
    // 검색 조건 설정
  };

  // 초기화
  currentPage = 1;
  loadData();
}

// 초기화
loadData();

// 검색 버튼 클릭 이벤트에 search2 함수 바인딩
document.getElementById('searchButton').addEventListener('click', search2);


function createPaginationUI() {
  const paginationContainer = document.getElementById('pagination');
  paginationContainer.innerHTML = '';

  // 이전 페이지로 이동하는 버튼 생성
  const prevButton = document.createElement('button');
  prevButton.innerText = '이전';
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      loadData();
    }
  });
  paginationContainer.appendChild(prevButton);

  // 페이지 번호 버튼 생성
  for (let i = 1; i <= totalPage; i++) {
    const pageButton = document.createElement('button');
    pageButton.innerText = i;
    pageButton.addEventListener('click', () => {
      currentPage = i;
      loadData();
    });
    paginationContainer.appendChild(pageButton);
  }

  // 다음 페이지로 이동하는 버튼 생성
  const nextButton = document.createElement('button');
  nextButton.innerText = '다음';
  nextButton.addEventListener('click', () => {
    if (currentPage < totalPage) {
      currentPage++;
      loadData();
    }
  });
  paginationContainer.appendChild(nextButton);
}

